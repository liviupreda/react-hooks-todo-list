{"version":3,"sources":["TodoList.js","TodoForm.js","hooks/useInputState.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","Paper","List","todos","map","todo","i","ListItem","key","ListItemText","task","Divider","TodoForm","addTodo","initialVal","useState","value","setValue","e","target","useInputState","handleChange","reset","style","margin","padding","onSubmit","preventDefault","TextField","onChange","label","fullWidth","TodoApp","id","completed","setTodos","height","backgroundColor","elevation","AppBar","color","position","Typography","Grid","container","justify","marginTop","item","xs","md","lg","newTodoText","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAOe,SAASA,EAASC,GAC/B,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGF,EAAMG,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACf,oCACE,kBAACC,EAAA,EAAD,CAAUC,IAAKF,GACb,kBAACG,EAAA,EAAD,KAAeJ,EAAKK,OAEtB,kBAACC,EAAA,EAAD,Y,YCXG,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,ECH/B,SAAAC,GAAe,IAAD,EACDC,mBAASD,GADR,mBACpBE,EADoB,KACbC,EADa,KAQ3B,MAAO,CAACD,EANa,SAAAE,GACnBD,EAASC,EAAEC,OAAOH,QAEN,WACZC,EAAS,MDF0BG,CAAc,IADP,mBACrCJ,EADqC,KAC9BK,EAD8B,KAChBC,EADgB,KAE5C,OACE,kBAACrB,EAAA,EAAD,CAAOsB,MAAO,CAAEC,OAAQ,SAAUC,QAAS,WACzC,0BACEC,SAAU,SAAAR,GACRA,EAAES,iBACFd,EAAQG,GACRM,MAGF,kBAACM,EAAA,EAAD,CACEZ,MAAOA,EACPa,SAAUR,EACVG,OAAO,SACPM,MAAM,eACNC,WAAS,M,oCEZJ,SAASC,IACtB,IADgC,EAMNjB,mBALL,CACnB,CAAEkB,GAAI,EAAGvB,KAAM,WAAYwB,WAAW,GACtC,CAAED,GAAI,EAAGvB,KAAM,WAAYwB,WAAW,GACtC,CAAED,GAAI,EAAGvB,KAAM,aAAcwB,WAAW,KAJV,mBAMzB/B,EANyB,KAMlBgC,EANkB,KAWhC,OACE,kBAAClC,EAAA,EAAD,CACEsB,MAAO,CACLE,QAAS,EACTD,OAAQ,EACRY,OAAQ,QACRC,gBAAiB,WAEnBC,UAAW,GAEX,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAASlB,MAAO,CAAEa,OAAQ,SACzD,kBAAC,IAAD,KACE,kBAACM,EAAA,EAAD,CAAYF,MAAM,WAAlB,sBAGJ,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAStB,MAAO,CAAEuB,UAAW,SACnD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAACtC,EAAD,CAAUC,QApBF,SAAAsC,GACdhB,EAAS,GAAD,mBAAKhC,GAAL,CAAY,CAAE8B,GAAI,EAAGvB,KAAMyC,EAAajB,WAAW,SAoBrD,kBAACnC,EAAD,CAAUI,MAAOA,O,MC1BZiD,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACrB,EAAD,QCKcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a94e04e1.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nexport default function TodoList(props) {\n  return (\n    <Paper>\n      <List>\n        {props.todos.map((todo, i) => (\n          <>\n            <ListItem key={i}>\n              <ListItemText>{todo.task}</ListItemText>\n            </ListItem>\n            <Divider />\n          </>\n        ))}\n      </List>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useInputState from \"./hooks/useInputState\";\n\nexport default function TodoForm({ addTodo }) {\n  const [value, handleChange, reset] = useInputState(\"\");\n  return (\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addTodo(value);\n          reset();\n        }}\n      >\n        <TextField\n          value={value}\n          onChange={handleChange}\n          margin=\"normal\"\n          label=\"Add New Todo\"\n          fullWidth\n        />\n      </form>\n    </Paper>\n  );\n}\n","import { useState } from \"react\";\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue(\"\");\n  };\n  return [value, handleChange, reset];\n};\n","import React, { useState } from \"react\";\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport ToolBar from \"@material-ui/core/Toolbar\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default function TodoApp() {\n  const initialTodos = [\n    { id: 1, task: \"Todo One\", completed: false },\n    { id: 2, task: \"Todo Two\", completed: true },\n    { id: 3, task: \"Todo Three\", completed: false }\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n  // Will use addTodo to handle TodoForm submit\n  const addTodo = newTodoText => {\n    setTodos([...todos, { id: 4, task: newTodoText, completed: false }]);\n  };\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\n        <ToolBar>\n          <Typography color=\"inherit\">Todos With Hooks</Typography>\n        </ToolBar>\n      </AppBar>\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\n        <Grid item xs={11} md={8} lg={4}>\n          <TodoForm addTodo={addTodo} />\n          <TodoList todos={todos} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\n// -- TodoApp\n//   -- TodoForm\n//   -- TodoList\n//     -- TodoItem\n\n// Todo:\n// id, task (content of the todo), completed (true/ false)\n","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}