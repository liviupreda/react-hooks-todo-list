{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","hooks/useTodoState.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","toggle","value","setValue","e","target","EditTodoForm","editTodo","id","task","toggleEditForm","useInputState","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","onChange","margin","fullWidth","autoFocus","Todo","completed","removeTodo","toggleTodo","useToggleState","isEditing","ListItem","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","todos","length","Paper","List","map","todo","i","key","Divider","TodoForm","addTodo","padding","label","TodoApp","initialTodos","setTodos","newTodoText","uuidv4","todoId","updatedTodos","filter","newTask","useTodoState","JSON","parse","window","localStorage","getItem","useEffect","document","title","setItem","stringify","backgroundColor","elevation","AppBar","color","position","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfd3b9fe.chunk.js","sourcesContent":["import { useState } from \"react\";\nconst useToggle = (initialVal = false) => {\n  const [state, setState] = useState(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  return [state, toggle];\n};\n\nexport default useToggle;\n","import { useState } from \"react\";\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue(\"\");\n  };\n  return [value, handleChange, reset];\n};\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useInputState from \"./hooks/useInputState\";\n\nfunction EditTodoForm({ editTodo, id, task, toggleEditForm }) {\n  const [value, handleChange, reset] = useInputState(task);\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        editTodo(id, value);\n        reset();\n        toggleEditForm();\n      }}\n      style={{ marginLeft: \"1rem\", width: \"50%\" }}\n    >\n      <TextField\n        value={value}\n        onChange={handleChange}\n        margin=\"normal\"\n        fullWidth\n        autoFocus\n      />\n    </form>\n  );\n}\n\nexport default EditTodoForm;\n","import React from \"react\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n\nfunction Todo({ id, task, completed, removeTodo, toggleTodo, editTodo }) {\n  const [isEditing, toggle] = useToggleState(false);\n  return (\n    <ListItem style={{ height: \"64px\" }}>\n      {isEditing ? (\n        <EditTodoForm\n          editTodo={editTodo}\n          id={id}\n          task={task}\n          toggleEditForm={toggle}\n        />\n      ) : (\n        <>\n          <Checkbox\n            tabIndex={-1}\n            checked={completed}\n            onClick={() => toggleTodo(id)}\n          />\n          <ListItemText\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n          >\n            {task}\n          </ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton aria-label=\"Delete\" onClick={() => removeTodo(id)}>\n              <DeleteIcon />\n            </IconButton>\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\n              <EditIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </>\n      )}\n    </ListItem>\n  );\n}\n\nexport default Todo;\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Todo from \"./Todo\";\n\nexport default function TodoList({ todos, removeTodo, toggleTodo, editTodo }) {\n  if (todos.length)\n    return (\n      <Paper>\n        <List>\n          {todos.map((todo, i) => (\n            <div key={i}>\n              <Todo\n                {...todo}\n                key={todo.id}\n                removeTodo={removeTodo}\n                toggleTodo={toggleTodo}\n                editTodo={editTodo}\n              />\n              {/* Do not render Divider for the last todo in the array */}\n              {i < todos.length - 1 && <Divider />}\n            </div>\n          ))}\n        </List>\n      </Paper>\n    );\n  return null;\n}\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useInputState from \"./hooks/useInputState\";\n\nfunction TodoForm({ addTodo }) {\n  const [value, handleChange, reset] = useInputState(\"\");\n  return (\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          addTodo(value);\n          reset();\n        }}\n      >\n        <TextField\n          value={value}\n          onChange={handleChange}\n          margin=\"normal\"\n          label=\"Add New Todo\"\n          fullWidth\n        />\n      </form>\n    </Paper>\n  );\n}\n\nexport default TodoForm;\n","import React, { useEffect } from \"react\";\nimport useTodoState from \"./hooks/useTodoState\";\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport ToolBar from \"@material-ui/core/Toolbar\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction TodoApp() {\n  const initialTodos = JSON.parse(window.localStorage.getItem(\"todos\") || \"[]\");\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(\n    initialTodos\n  );\n\n  useEffect(() => {\n    document.title = \"React Hooks Todo List\";\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\n        <ToolBar>\n          <Typography color=\"inherit\">Todos With Hooks</Typography>\n        </ToolBar>\n      </AppBar>\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\n        <Grid item xs={11} md={8} lg={4}>\n          <TodoForm addTodo={addTodo} />\n          <TodoList\n            todos={todos}\n            removeTodo={removeTodo}\n            toggleTodo={toggleTodo}\n            editTodo={editTodo}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default TodoApp;\n","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nexport default initialTodos => {\n  const [todos, setTodos] = useState(initialTodos);\n  return {\n    todos,\n    addTodo: newTodoText => {\n      setTodos([\n        ...todos,\n        { id: uuidv4(), task: newTodoText, completed: false }\n      ]);\n    },\n    removeTodo: todoId => {\n      const updatedTodos = todos.filter(todo => todo.id !== todoId);\n      setTodos(updatedTodos);\n    },\n    toggleTodo: todoId => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n      );\n      setTodos(updatedTodos);\n    },\n    editTodo: (todoId, newTask) => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, task: newTask } : todo\n      );\n      setTodos(updatedTodos);\n    }\n  };\n};\n","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}